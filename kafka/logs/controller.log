[2022-11-16 16:03:57,542] DEBUG preRegister called. Server=com.sun.jmx.mbeanserver.JmxMBeanServer@27082746, name=log4j:logger=kafka.controller (kafka.controller)
[2022-11-16 16:04:00,988] INFO [ControllerEventThread controllerId=1] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2022-11-16 16:04:01,078] INFO [Controller id=1] 1 successfully elected as the controller. Epoch incremented to 1 and epoch zk version is now 1 (kafka.controller.KafkaController)
[2022-11-16 16:04:01,088] INFO [Controller id=1] Creating FeatureZNode at path: /feature with contents: FeatureZNode(Enabled,Features{}) (kafka.controller.KafkaController)
[2022-11-16 16:04:01,172] INFO [Controller id=1] Registering handlers (kafka.controller.KafkaController)
[2022-11-16 16:04:01,177] INFO [Controller id=1] Deleting log dir event notifications (kafka.controller.KafkaController)
[2022-11-16 16:04:01,183] INFO [Controller id=1] Deleting isr change notifications (kafka.controller.KafkaController)
[2022-11-16 16:04:01,186] INFO [Controller id=1] Initializing controller context (kafka.controller.KafkaController)
[2022-11-16 16:04:01,222] INFO [Controller id=1] Initialized broker epochs cache: HashMap(1 -> 40) (kafka.controller.KafkaController)
[2022-11-16 16:04:01,236] DEBUG [Controller id=1] Register BrokerModifications handler for Set(1) (kafka.controller.KafkaController)
[2022-11-16 16:04:01,243] DEBUG [Channel manager on controller 1]: Controller 1 trying to connect to broker 1 (kafka.controller.ControllerChannelManager)
[2022-11-16 16:04:01,263] INFO [RequestSendThread controllerId=1] Starting (kafka.controller.RequestSendThread)
[2022-11-16 16:04:01,265] INFO [Controller id=1] Currently active brokers in the cluster: Set(1) (kafka.controller.KafkaController)
[2022-11-16 16:04:01,266] INFO [Controller id=1] Currently shutting brokers in the cluster: HashSet() (kafka.controller.KafkaController)
[2022-11-16 16:04:01,266] INFO [Controller id=1] Current list of topics in the cluster: HashSet() (kafka.controller.KafkaController)
[2022-11-16 16:04:01,266] INFO [Controller id=1] Fetching topic deletions in progress (kafka.controller.KafkaController)
[2022-11-16 16:04:01,273] INFO [Controller id=1] List of topics to be deleted:  (kafka.controller.KafkaController)
[2022-11-16 16:04:01,276] INFO [Controller id=1] List of topics ineligible for deletion:  (kafka.controller.KafkaController)
[2022-11-16 16:04:01,277] INFO [Controller id=1] Initializing topic deletion manager (kafka.controller.KafkaController)
[2022-11-16 16:04:01,277] INFO [Topic Deletion Manager 1] Initializing manager with initial deletions: Set(), initial ineligible deletions: HashSet() (kafka.controller.TopicDeletionManager)
[2022-11-16 16:04:01,282] INFO [Controller id=1] Sending update metadata request (kafka.controller.KafkaController)
[2022-11-16 16:04:01,317] INFO [ReplicaStateMachine controllerId=1] Initializing replica state (kafka.controller.ZkReplicaStateMachine)
[2022-11-16 16:04:01,318] INFO [ReplicaStateMachine controllerId=1] Triggering online replica state changes (kafka.controller.ZkReplicaStateMachine)
[2022-11-16 16:04:01,321] INFO [RequestSendThread controllerId=1] Controller 1 connected to 10.0.0.1:9092 (id: 1 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2022-11-16 16:04:01,324] INFO [ReplicaStateMachine controllerId=1] Triggering offline replica state changes (kafka.controller.ZkReplicaStateMachine)
[2022-11-16 16:04:01,325] DEBUG [ReplicaStateMachine controllerId=1] Started replica state machine with initial state -> HashMap() (kafka.controller.ZkReplicaStateMachine)
[2022-11-16 16:04:01,326] INFO [PartitionStateMachine controllerId=1] Initializing partition state (kafka.controller.ZkPartitionStateMachine)
[2022-11-16 16:04:01,328] INFO [PartitionStateMachine controllerId=1] Triggering online partition state changes (kafka.controller.ZkPartitionStateMachine)
[2022-11-16 16:04:01,338] DEBUG [PartitionStateMachine controllerId=1] Started partition state machine with initial state -> HashMap() (kafka.controller.ZkPartitionStateMachine)
[2022-11-16 16:04:01,338] INFO [Controller id=1] Ready to serve as the new controller with epoch 1 (kafka.controller.KafkaController)
[2022-11-16 16:04:01,349] INFO [Controller id=1] Partitions undergoing preferred replica election:  (kafka.controller.KafkaController)
[2022-11-16 16:04:01,351] INFO [Controller id=1] Partitions that completed preferred replica election:  (kafka.controller.KafkaController)
[2022-11-16 16:04:01,351] INFO [Controller id=1] Skipping preferred replica election for partitions due to topic deletion:  (kafka.controller.KafkaController)
[2022-11-16 16:04:01,357] INFO [Controller id=1] Resuming preferred replica election for partitions:  (kafka.controller.KafkaController)
[2022-11-16 16:04:01,359] INFO [Controller id=1] Starting replica leader election (PREFERRED) for partitions  triggered by ZkTriggered (kafka.controller.KafkaController)
[2022-11-16 16:04:01,396] INFO [Controller id=1] Starting the controller scheduler (kafka.controller.KafkaController)
[2022-11-16 16:04:01,925] INFO [Controller id=1] Newly added brokers: 2, deleted brokers: , bounced brokers: , all live brokers: 1,2 (kafka.controller.KafkaController)
[2022-11-16 16:04:01,926] DEBUG [Channel manager on controller 1]: Controller 1 trying to connect to broker 2 (kafka.controller.ControllerChannelManager)
[2022-11-16 16:04:01,930] INFO [RequestSendThread controllerId=1] Starting (kafka.controller.RequestSendThread)
[2022-11-16 16:04:01,932] INFO [Controller id=1] New broker startup callback for 2 (kafka.controller.KafkaController)
[2022-11-16 16:04:01,935] DEBUG [Controller id=1] Register BrokerModifications handler for List(2) (kafka.controller.KafkaController)
[2022-11-16 16:04:01,937] INFO [Controller id=1] Updated broker epochs cache: HashMap(1 -> 40, 2 -> 61) (kafka.controller.KafkaController)
[2022-11-16 16:04:01,938] INFO [RequestSendThread controllerId=1] Controller 1 connected to 10.0.0.2:9092 (id: 2 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2022-11-16 16:04:01,995] INFO [ControllerEventThread controllerId=2] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2022-11-16 16:04:02,017] DEBUG [Controller id=2] Broker 1 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2022-11-16 16:04:02,823] INFO [Controller id=1] Newly added brokers: 3, deleted brokers: , bounced brokers: , all live brokers: 1,2,3 (kafka.controller.KafkaController)
[2022-11-16 16:04:02,823] DEBUG [Channel manager on controller 1]: Controller 1 trying to connect to broker 3 (kafka.controller.ControllerChannelManager)
[2022-11-16 16:04:02,828] INFO [RequestSendThread controllerId=1] Starting (kafka.controller.RequestSendThread)
[2022-11-16 16:04:02,828] INFO [Controller id=1] New broker startup callback for 3 (kafka.controller.KafkaController)
[2022-11-16 16:04:02,829] DEBUG [Controller id=1] Register BrokerModifications handler for List(3) (kafka.controller.KafkaController)
[2022-11-16 16:04:02,831] INFO [Controller id=1] Updated broker epochs cache: HashMap(1 -> 40, 2 -> 61, 3 -> 63) (kafka.controller.KafkaController)
[2022-11-16 16:04:02,834] INFO [RequestSendThread controllerId=1] Controller 1 connected to 10.0.0.3:9092 (id: 3 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2022-11-16 16:04:02,901] INFO [ControllerEventThread controllerId=3] Starting (kafka.controller.ControllerEventManager$ControllerEventThread)
[2022-11-16 16:04:02,920] DEBUG [Controller id=3] Broker 1 has been elected as the controller, so stopping the election process. (kafka.controller.KafkaController)
[2022-11-16 16:04:06,397] INFO [Controller id=1] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2022-11-16 16:04:06,398] TRACE [Controller id=1] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2022-11-16 16:04:07,165] INFO [Controller id=1] New topics: [Set(inputTopic)], deleted topics: [HashSet()], new partition replica assignment [Set(TopicIdReplicaAssignment(inputTopic,Some(wnDgJokkTMSv7XgQBGl2ZQ),Map(inputTopic-0 -> ReplicaAssignment(replicas=3,1,2, addingReplicas=, removingReplicas=))))] (kafka.controller.KafkaController)
[2022-11-16 16:04:07,167] INFO [Controller id=1] New partition creation callback for inputTopic-0 (kafka.controller.KafkaController)
[2022-11-16 16:04:09,876] INFO [Controller id=1] New topics: [Set(__consumer_offsets)], deleted topics: [HashSet()], new partition replica assignment [Set(TopicIdReplicaAssignment(__consumer_offsets,Some(in36T-xCQBWVRB48lwWwGg),HashMap(__consumer_offsets-22 -> ReplicaAssignment(replicas=3, addingReplicas=, removingReplicas=), __consumer_offsets-30 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-25 -> ReplicaAssignment(replicas=3, addingReplicas=, removingReplicas=), __consumer_offsets-35 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-37 -> ReplicaAssignment(replicas=3, addingReplicas=, removingReplicas=), __consumer_offsets-38 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-13 -> ReplicaAssignment(replicas=3, addingReplicas=, removingReplicas=), __consumer_offsets-8 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-21 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-4 -> ReplicaAssignment(replicas=3, addingReplicas=, removingReplicas=), __consumer_offsets-27 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-7 -> ReplicaAssignment(replicas=3, addingReplicas=, removingReplicas=), __consumer_offsets-9 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-46 -> ReplicaAssignment(replicas=3, addingReplicas=, removingReplicas=), __consumer_offsets-41 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-33 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-23 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-49 -> ReplicaAssignment(replicas=3, addingReplicas=, removingReplicas=), __consumer_offsets-47 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-16 -> ReplicaAssignment(replicas=3, addingReplicas=, removingReplicas=), __consumer_offsets-28 -> ReplicaAssignment(replicas=3, addingReplicas=, removingReplicas=), __consumer_offsets-31 -> ReplicaAssignment(replicas=3, addingReplicas=, removingReplicas=), __consumer_offsets-36 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-42 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-3 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-18 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-15 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-24 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-17 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-48 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-19 -> ReplicaAssignment(replicas=3, addingReplicas=, removingReplicas=), __consumer_offsets-11 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-2 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-43 -> ReplicaAssignment(replicas=3, addingReplicas=, removingReplicas=), __consumer_offsets-6 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-14 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-20 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-0 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-44 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-39 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-12 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-45 -> ReplicaAssignment(replicas=2, addingReplicas=, removingReplicas=), __consumer_offsets-1 -> ReplicaAssignment(replicas=3, addingReplicas=, removingReplicas=), __consumer_offsets-5 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-26 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-29 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-34 -> ReplicaAssignment(replicas=3, addingReplicas=, removingReplicas=), __consumer_offsets-10 -> ReplicaAssignment(replicas=3, addingReplicas=, removingReplicas=), __consumer_offsets-32 -> ReplicaAssignment(replicas=1, addingReplicas=, removingReplicas=), __consumer_offsets-40 -> ReplicaAssignment(replicas=3, addingReplicas=, removingReplicas=))))] (kafka.controller.KafkaController)
[2022-11-16 16:04:09,877] INFO [Controller id=1] New partition creation callback for __consumer_offsets-22,__consumer_offsets-30,__consumer_offsets-25,__consumer_offsets-35,__consumer_offsets-37,__consumer_offsets-38,__consumer_offsets-13,__consumer_offsets-8,__consumer_offsets-21,__consumer_offsets-4,__consumer_offsets-27,__consumer_offsets-7,__consumer_offsets-9,__consumer_offsets-46,__consumer_offsets-41,__consumer_offsets-33,__consumer_offsets-23,__consumer_offsets-49,__consumer_offsets-47,__consumer_offsets-16,__consumer_offsets-28,__consumer_offsets-31,__consumer_offsets-36,__consumer_offsets-42,__consumer_offsets-3,__consumer_offsets-18,__consumer_offsets-15,__consumer_offsets-24,__consumer_offsets-17,__consumer_offsets-48,__consumer_offsets-19,__consumer_offsets-11,__consumer_offsets-2,__consumer_offsets-43,__consumer_offsets-6,__consumer_offsets-14,__consumer_offsets-20,__consumer_offsets-0,__consumer_offsets-44,__consumer_offsets-39,__consumer_offsets-12,__consumer_offsets-45,__consumer_offsets-1,__consumer_offsets-5,__consumer_offsets-26,__consumer_offsets-29,__consumer_offsets-34,__consumer_offsets-10,__consumer_offsets-32,__consumer_offsets-40 (kafka.controller.KafkaController)
